let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\217\255\218\255\017\000\000\000\001\000\005\000\000\000\
    \001\000\006\000\000\000\001\000\002\000\010\000\003\000\014\000\
    \015\000\239\255\002\000\001\000\016\000\243\255\244\255\030\000\
    \246\255\247\255\248\255\249\255\250\255\251\255\252\255\253\255\
    \254\255\255\255\232\255\238\255\241\255\240\255\237\255\235\255\
    \233\255\016\000\001\000\006\000\013\000\018\000\231\255\020\000\
    \018\000\014\000\016\000\032\000\230\255\017\000\037\000\028\000\
    \036\000\229\255\030\000\024\000\039\000\228\255\024\000\041\000\
    \227\255\027\000\226\255\224\255\029\000\044\000\225\255\038\000\
    \031\000\031\000\035\000\040\000\223\255\050\000\037\000\222\255\
    \039\000\049\000\045\000\053\000\221\255\052\000\050\000\058\000\
    \220\255\117\000\127\000\142\000\152\000\162\000\181\000\191\000\
    \001\000\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\036\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\021\000\019\000\
    \038\000\255\255\038\000\038\000\013\000\255\255\255\255\010\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\036\000\255\255\036\000\255\255\036\000\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \097\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\033\000\098\000\000\000\033\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\016\000\000\000\032\000\000\000\000\000\019\000\036\000\
    \031\000\030\000\022\000\024\000\026\000\023\000\000\000\021\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\025\000\027\000\015\000\020\000\014\000\090\000\
    \040\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\039\000\038\000\035\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\034\000\000\000\017\000\000\000\
    \000\000\058\000\013\000\012\000\011\000\007\000\010\000\066\000\
    \085\000\008\000\072\000\044\000\068\000\043\000\045\000\065\000\
    \053\000\047\000\006\000\005\000\009\000\080\000\089\000\004\000\
    \062\000\041\000\071\000\029\000\018\000\028\000\037\000\042\000\
    \046\000\048\000\049\000\050\000\051\000\052\000\054\000\055\000\
    \056\000\057\000\059\000\060\000\061\000\063\000\064\000\067\000\
    \069\000\070\000\077\000\073\000\074\000\075\000\076\000\078\000\
    \079\000\081\000\082\000\083\000\084\000\086\000\087\000\088\000\
    \095\000\000\000\095\000\000\000\000\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\093\000\000\000\093\000\000\000\000\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\091\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\096\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \014\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\015\000\016\000\020\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \255\255\255\255\255\255\255\255\023\000\255\255\000\000\255\255\
    \255\255\010\000\000\000\000\000\000\000\000\000\000\000\008\000\
    \004\000\000\000\006\000\043\000\007\000\042\000\044\000\008\000\
    \011\000\012\000\000\000\000\000\000\000\005\000\003\000\000\000\
    \009\000\013\000\006\000\000\000\000\000\000\000\018\000\041\000\
    \045\000\047\000\048\000\049\000\050\000\051\000\053\000\054\000\
    \055\000\056\000\058\000\059\000\060\000\062\000\063\000\065\000\
    \068\000\069\000\071\000\072\000\073\000\074\000\075\000\077\000\
    \078\000\080\000\081\000\082\000\083\000\085\000\086\000\087\000\
    \089\000\255\255\089\000\255\255\255\255\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\089\000\089\000\089\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\091\000\255\255\091\000\255\255\255\255\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\090\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\095\000\
    \095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\096\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 9 "scanner.mll"
                       ( token lexbuf )
# 182 "scanner.ml"

  | 1 ->
# 10 "scanner.mll"
          ( comment lexbuf )
# 187 "scanner.ml"

  | 2 ->
# 11 "scanner.mll"
           ( LPAREN )
# 192 "scanner.ml"

  | 3 ->
# 12 "scanner.mll"
           ( RPAREN )
# 197 "scanner.ml"

  | 4 ->
# 13 "scanner.mll"
           ( LBRACE )
# 202 "scanner.ml"

  | 5 ->
# 14 "scanner.mll"
           ( RBRACE )
# 207 "scanner.ml"

  | 6 ->
# 15 "scanner.mll"
           ( SEMI )
# 212 "scanner.ml"

  | 7 ->
# 16 "scanner.mll"
           ( COMMA )
# 217 "scanner.ml"

  | 8 ->
# 17 "scanner.mll"
           ( COLON )
# 222 "scanner.ml"

  | 9 ->
# 18 "scanner.mll"
           ( PLUS )
# 227 "scanner.ml"

  | 10 ->
# 19 "scanner.mll"
           ( MINUS )
# 232 "scanner.ml"

  | 11 ->
# 20 "scanner.mll"
           ( TIMES )
# 237 "scanner.ml"

  | 12 ->
# 21 "scanner.mll"
           ( DIVIDE )
# 242 "scanner.ml"

  | 13 ->
# 22 "scanner.mll"
           ( ASSIGN )
# 247 "scanner.ml"

  | 14 ->
# 23 "scanner.mll"
           ( AND )
# 252 "scanner.ml"

  | 15 ->
# 24 "scanner.mll"
           ( OR )
# 257 "scanner.ml"

  | 16 ->
# 25 "scanner.mll"
           ( POW )
# 262 "scanner.ml"

  | 17 ->
# 26 "scanner.mll"
           ( EQ )
# 267 "scanner.ml"

  | 18 ->
# 27 "scanner.mll"
           ( NEQ )
# 272 "scanner.ml"

  | 19 ->
# 28 "scanner.mll"
           ( LT )
# 277 "scanner.ml"

  | 20 ->
# 29 "scanner.mll"
           ( LEQ )
# 282 "scanner.ml"

  | 21 ->
# 30 "scanner.mll"
           ( GT )
# 287 "scanner.ml"

  | 22 ->
# 31 "scanner.mll"
           ( GEQ )
# 292 "scanner.ml"

  | 23 ->
# 32 "scanner.mll"
           ( ARROW )
# 297 "scanner.ml"

  | 24 ->
# 33 "scanner.mll"
            ( BOOLEAN )
# 302 "scanner.ml"

  | 25 ->
# 34 "scanner.mll"
            ( COMPUTE )
# 307 "scanner.ml"

  | 26 ->
# 35 "scanner.mll"
           ( DOUBLE )
# 312 "scanner.ml"

  | 27 ->
# 36 "scanner.mll"
           ( FALSE )
# 317 "scanner.ml"

  | 28 ->
# 37 "scanner.mll"
           ( TRUE )
# 322 "scanner.ml"

  | 29 ->
# 38 "scanner.mll"
           ( IF )
# 327 "scanner.ml"

  | 30 ->
# 39 "scanner.mll"
           ( ELSE )
# 332 "scanner.ml"

  | 31 ->
# 40 "scanner.mll"
           ( INT )
# 337 "scanner.ml"

  | 32 ->
# 41 "scanner.mll"
           ( RETURN )
# 342 "scanner.ml"

  | 33 ->
# 42 "scanner.mll"
           ( RULES )
# 347 "scanner.ml"

  | 34 ->
# 43 "scanner.mll"
           ( STRING )
# 352 "scanner.ml"

  | 35 ->
# 44 "scanner.mll"
           ( WHILE )
# 357 "scanner.ml"

  | 36 ->
let
# 45 "scanner.mll"
         lxm
# 363 "scanner.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "scanner.mll"
             ( LITERAL(int_of_string lxm) )
# 367 "scanner.ml"

  | 37 ->
# 46 "scanner.mll"
      ( EOF )
# 372 "scanner.ml"

  | 38 ->
let
# 47 "scanner.mll"
       char
# 378 "scanner.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 47 "scanner.mll"
            ( raise (Failure("Illegal character: " ^ Char.escaped char)) )
# 382 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 96
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 50 "scanner.mll"
       ( token lexbuf )
# 393 "scanner.ml"

  | 1 ->
# 51 "scanner.mll"
       ( comment lexbuf )
# 398 "scanner.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

