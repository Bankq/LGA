type token =
  | ASSIGN
  | TERMINATOR
  | RETURN
  | INDENT
  | OUTDENT
  | ARROW
  | LBK
  | RBK
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | MOD
  | AND
  | OR
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | COLON
  | LBRACE
  | RBRACE
  | COMMA
  | DOT
  | BOOL of (bool)
  | THIS
  | IF
  | ELSE
  | WHILE
  | FOR
  | FORIN
  | IDENTIFIER of (string)
  | NUM of (float)
  | STRING of (string)
  | STATEMENT of (string)
  | OUTDENT_COUNT of (int)
  | NULL of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
open Ast 
# 51 "parser.ml"
let yytransl_const = [|
  257 (* ASSIGN *);
  258 (* TERMINATOR *);
  259 (* RETURN *);
  260 (* INDENT *);
  261 (* OUTDENT *);
  262 (* ARROW *);
  263 (* LBK *);
  264 (* RBK *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIVIDE *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* MOD *);
  274 (* AND *);
  275 (* OR *);
  276 (* LT *);
  277 (* LEQ *);
  278 (* GT *);
  279 (* GEQ *);
  280 (* NOT *);
  281 (* COLON *);
  282 (* LBRACE *);
  283 (* RBRACE *);
  284 (* COMMA *);
  285 (* DOT *);
  287 (* THIS *);
  288 (* IF *);
  289 (* ELSE *);
  290 (* WHILE *);
  291 (* FOR *);
  292 (* FORIN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  286 (* BOOL *);
  293 (* IDENTIFIER *);
  294 (* NUM *);
  295 (* STRING *);
  296 (* STATEMENT *);
  297 (* OUTDENT_COUNT *);
  298 (* NULL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\006\000\006\000\
\010\000\010\000\010\000\010\000\010\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\016\000\
\013\000\013\000\013\000\015\000\015\000\015\000\017\000\017\000\
\017\000\011\000\011\000\020\000\020\000\012\000\012\000\014\000\
\021\000\021\000\022\000\022\000\022\000\022\000\022\000\009\000\
\009\000\009\000\009\000\009\000\023\000\023\000\024\000\024\000\
\024\000\024\000\025\000\026\000\008\000\008\000\003\000\003\000\
\007\000\027\000\027\000\018\000\018\000\018\000\019\000\000\000"

let yylen = "\002\000\
\000\000\001\000\002\000\001\000\003\000\002\000\001\000\001\000\
\001\000\005\000\003\000\003\000\005\000\005\000\002\000\001\000\
\000\000\001\000\003\000\004\000\006\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\004\000\
\001\000\001\000\001\000\003\000\004\000\005\000\001\000\001\000\
\003\000\003\000\005\000\001\000\001\000\000\000\001\000\002\000\
\002\000\004\000\001\000\003\000\004\000\004\000\006\000\000\000\
\001\000\003\000\004\000\006\000\001\000\003\000\001\000\001\000\
\001\000\001\000\003\000\001\000\002\000\003\000\002\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\
\000\000\000\000\000\000\000\000\081\000\082\000\083\000\009\000\
\085\000\088\000\000\000\000\000\004\000\000\000\008\000\047\000\
\000\000\023\000\024\000\025\000\000\000\042\000\000\000\084\000\
\000\000\079\000\000\000\000\000\071\000\072\000\000\000\073\000\
\074\000\065\000\000\000\000\000\052\000\000\000\000\000\053\000\
\000\000\087\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\080\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\012\000\000\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\034\000\000\000\000\000\000\000\000\000\057\000\000\000\
\049\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\040\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\067\000\000\000\020\000\
\000\000\000\000\010\000\013\000\058\000\046\000\062\000\000\000\
\000\000\000\000\000\000\051\000\000\000\068\000\021\000\063\000"

let yydgoto = "\002\000\
\018\000\019\000\020\000\021\000\076\000\023\000\024\000\038\000\
\039\000\046\000\047\000\080\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\049\000\071\000\077\000\042\000\043\000\
\000\000\000\000\032\000"

let yysindex = "\255\255\
\164\255\000\000\207\001\205\255\089\255\207\001\004\255\000\000\
\223\254\207\001\207\001\223\254\000\000\000\000\000\000\000\000\
\000\000\000\000\017\255\024\255\000\000\239\001\000\000\000\000\
\002\255\000\000\000\000\000\000\013\255\000\000\000\000\000\000\
\239\001\000\000\084\255\145\255\000\000\000\000\251\254\000\000\
\000\000\000\000\036\255\239\001\000\000\047\255\053\255\000\000\
\072\255\000\000\168\001\168\001\009\255\012\255\000\000\207\001\
\207\001\207\001\207\001\207\001\207\001\207\001\207\001\207\001\
\207\001\207\001\207\001\207\001\110\001\223\254\000\000\121\255\
\000\000\185\255\000\000\239\001\020\255\094\255\089\255\106\255\
\207\001\000\000\170\255\004\255\127\001\068\255\000\000\098\255\
\000\000\222\001\222\001\040\255\040\255\252\001\252\001\040\255\
\000\000\000\000\009\002\009\002\009\002\009\002\000\000\093\255\
\000\000\207\001\207\001\239\001\093\255\000\000\207\001\144\255\
\118\255\000\000\089\255\089\255\239\001\004\255\004\255\000\000\
\000\000\207\001\239\001\118\255\118\255\051\255\239\001\187\001\
\216\255\239\001\207\001\185\255\000\000\000\000\104\255\000\000\
\047\255\206\001\000\000\000\000\000\000\000\000\000\000\239\001\
\093\255\244\255\248\255\000\000\157\001\000\000\000\000\000\000"

let yyrindex = "\000\000\
\136\000\000\000\002\000\000\000\073\001\000\000\053\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\142\000\000\000\000\000\139\000\000\000\000\000\
\057\000\000\000\000\000\000\000\029\000\000\000\001\000\000\000\
\166\000\000\000\000\000\000\000\000\000\000\000\177\255\000\000\
\000\000\000\000\152\255\090\001\000\000\072\001\133\001\000\000\
\000\000\000\000\000\000\000\000\000\000\177\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\001\177\255\000\000\173\001\000\000\
\000\000\000\000\000\000\000\000\000\000\193\000\000\000\000\000\
\000\000\165\000\192\000\084\000\111\000\035\001\063\001\138\000\
\000\000\000\000\219\000\228\000\255\000\008\001\000\000\125\255\
\000\000\000\000\000\000\102\001\191\001\000\000\088\255\000\000\
\000\000\000\000\000\000\083\001\228\255\000\000\111\001\000\000\
\000\000\000\000\075\255\000\000\000\000\000\000\117\001\000\000\
\000\000\056\001\000\000\000\000\000\000\000\000\191\001\000\000\
\191\001\000\000\000\000\000\000\000\000\000\000\000\000\166\001\
\191\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\146\000\238\255\101\000\006\000\000\000\015\000\073\000\
\048\000\051\000\178\255\235\255\000\000\000\000\000\000\003\000\
\000\000\000\000\025\000\000\000\000\000\200\255\180\255\000\000\
\000\000\000\000\000\000"

let yytablesize = 796
let yytable = "\001\000\
\043\000\016\000\114\000\013\000\078\000\121\000\022\000\040\000\
\033\000\022\000\069\000\044\000\104\000\072\000\003\000\051\000\
\052\000\109\000\054\000\037\000\005\000\045\000\079\000\050\000\
\083\000\055\000\053\000\110\000\041\000\041\000\070\000\048\000\
\086\000\087\000\009\000\006\000\081\000\007\000\134\000\136\000\
\013\000\008\000\009\000\010\000\088\000\011\000\012\000\111\000\
\013\000\014\000\015\000\016\000\131\000\017\000\132\000\112\000\
\022\000\063\000\064\000\022\000\141\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\082\000\145\000\050\000\108\000\050\000\050\000\
\084\000\040\000\126\000\028\000\105\000\054\000\117\000\129\000\
\073\000\055\000\123\000\055\000\055\000\037\000\133\000\036\000\
\085\000\055\000\045\000\113\000\124\000\050\000\050\000\041\000\
\036\000\139\000\140\000\115\000\048\000\116\000\029\000\127\000\
\128\000\146\000\007\000\147\000\130\000\040\000\040\000\009\000\
\111\000\004\000\106\000\149\000\107\000\013\000\054\000\138\000\
\054\000\037\000\037\000\079\000\045\000\045\000\054\000\001\000\
\144\000\032\000\007\000\041\000\041\000\002\000\048\000\048\000\
\006\000\131\000\007\000\132\000\074\000\035\000\008\000\009\000\
\075\000\069\000\089\000\069\000\069\000\013\000\014\000\015\000\
\125\000\069\000\017\000\135\000\026\000\015\000\003\000\004\000\
\006\000\137\000\007\000\118\000\005\000\119\000\008\000\009\000\
\006\000\000\000\054\000\069\000\054\000\013\000\014\000\015\000\
\000\000\000\000\017\000\006\000\074\000\007\000\000\000\027\000\
\011\000\008\000\009\000\010\000\120\000\011\000\012\000\000\000\
\013\000\014\000\015\000\016\000\000\000\017\000\000\000\003\000\
\006\000\034\000\007\000\000\000\000\000\005\000\008\000\009\000\
\000\000\131\000\035\000\132\000\143\000\013\000\014\000\015\000\
\000\000\000\000\017\000\036\000\006\000\070\000\007\000\070\000\
\070\000\000\000\008\000\009\000\010\000\070\000\011\000\012\000\
\000\000\013\000\014\000\015\000\016\000\115\000\017\000\116\000\
\150\000\118\000\000\000\119\000\151\000\000\000\037\000\070\000\
\000\000\048\000\043\000\016\000\043\000\043\000\016\000\038\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\000\000\000\000\000\000\043\000\043\000\043\000\041\000\000\000\
\041\000\041\000\030\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\000\000\000\000\041\000\
\041\000\041\000\022\000\000\000\022\000\022\000\031\000\000\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\000\000\000\000\022\000\022\000\028\000\000\000\028\000\
\028\000\039\000\000\000\028\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\044\000\000\000\028\000\
\028\000\028\000\028\000\000\000\000\000\000\000\028\000\028\000\
\029\000\000\000\029\000\029\000\045\000\000\000\029\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\000\000\000\000\029\000\029\000\029\000\029\000\000\000\000\000\
\000\000\029\000\029\000\032\000\007\000\032\000\032\000\007\000\
\000\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\000\000\000\000\032\000\032\000\032\000\
\032\000\000\000\000\000\000\000\032\000\032\000\026\000\015\000\
\026\000\026\000\015\000\000\000\026\000\000\000\026\000\026\000\
\026\000\000\000\006\000\026\000\026\000\006\000\000\000\000\000\
\026\000\026\000\026\000\026\000\000\000\000\000\000\000\026\000\
\026\000\027\000\011\000\027\000\027\000\011\000\000\000\027\000\
\000\000\027\000\027\000\027\000\000\000\000\000\027\000\027\000\
\000\000\000\000\000\000\027\000\027\000\027\000\027\000\000\000\
\000\000\000\000\027\000\027\000\035\000\000\000\035\000\035\000\
\000\000\000\000\035\000\000\000\035\000\036\000\000\000\036\000\
\036\000\035\000\035\000\036\000\000\000\036\000\035\000\035\000\
\035\000\035\000\036\000\036\000\000\000\035\000\035\000\036\000\
\036\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\037\000\000\000\037\000\037\000\000\000\000\000\037\000\000\000\
\037\000\038\000\000\000\038\000\038\000\037\000\037\000\038\000\
\000\000\038\000\037\000\037\000\037\000\037\000\038\000\038\000\
\000\000\037\000\037\000\038\000\038\000\038\000\038\000\000\000\
\000\000\000\000\038\000\038\000\030\000\000\000\030\000\030\000\
\000\000\000\000\030\000\000\000\030\000\059\000\000\000\059\000\
\059\000\030\000\030\000\059\000\000\000\059\000\017\000\000\000\
\017\000\060\000\000\000\060\000\060\000\030\000\030\000\060\000\
\031\000\060\000\031\000\031\000\000\000\000\000\031\000\059\000\
\031\000\054\000\064\000\054\000\064\000\031\000\031\000\017\000\
\017\000\000\000\064\000\060\000\064\000\000\000\064\000\064\000\
\000\000\031\000\031\000\039\000\000\000\039\000\039\000\000\000\
\000\000\039\000\054\000\039\000\064\000\000\000\000\000\044\000\
\000\000\044\000\044\000\000\000\000\000\044\000\064\000\044\000\
\017\000\074\000\017\000\017\000\039\000\039\000\045\000\103\000\
\045\000\045\000\000\000\000\000\045\000\000\000\045\000\000\000\
\044\000\044\000\122\000\000\000\000\000\006\000\018\000\007\000\
\018\000\018\000\017\000\008\000\009\000\000\000\000\000\045\000\
\045\000\000\000\013\000\014\000\015\000\000\000\006\000\017\000\
\007\000\000\000\000\000\000\000\008\000\009\000\131\000\018\000\
\132\000\152\000\000\000\013\000\014\000\015\000\000\000\061\000\
\017\000\061\000\061\000\004\000\000\000\061\000\055\000\061\000\
\055\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\142\000\
\054\000\061\000\054\000\054\000\000\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\148\000\000\000\000\000\000\000\000\000\000\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\000\000\006\000\000\000\
\007\000\000\000\058\000\059\000\008\000\009\000\062\000\063\000\
\064\000\000\000\000\000\013\000\014\000\015\000\000\000\000\000\
\017\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\056\000\057\000\
\058\000\059\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\056\000\057\000\058\000\059\000\000\000\
\000\000\062\000\063\000\064\000"

let yycheck = "\001\000\
\000\000\000\000\079\000\037\001\010\001\084\000\001\000\005\000\
\003\000\004\000\009\001\006\000\069\000\001\001\003\001\010\000\
\011\000\074\000\002\001\005\000\009\001\007\000\028\001\009\000\
\046\000\002\001\012\000\008\001\000\000\005\000\029\001\007\000\
\051\000\052\000\031\001\024\001\001\001\026\001\115\000\118\000\
\037\001\030\001\031\001\032\001\036\001\034\001\035\001\028\001\
\037\001\038\001\039\001\040\001\002\001\042\001\004\001\077\000\
\000\000\018\001\019\001\054\000\010\001\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\028\001\132\000\002\001\072\000\004\001\005\001\
\028\001\079\000\104\000\000\000\070\000\002\001\081\000\109\000\
\005\001\002\001\085\000\004\001\005\001\079\000\113\000\007\001\
\025\001\010\001\084\000\006\001\033\001\027\001\028\001\079\000\
\007\001\124\000\125\000\002\001\084\000\004\001\000\000\106\000\
\107\000\135\000\026\001\137\000\111\000\115\000\116\000\031\001\
\028\001\004\001\002\001\145\000\004\001\037\001\002\001\122\000\
\004\001\115\000\116\000\028\001\118\000\119\000\010\001\000\000\
\131\000\000\000\000\000\115\000\116\000\000\000\118\000\119\000\
\024\001\002\001\026\001\004\001\004\001\004\000\030\001\031\001\
\008\001\002\001\054\000\004\001\005\001\037\001\038\001\039\001\
\088\000\010\001\042\001\116\000\000\000\000\000\003\001\004\001\
\024\001\119\000\026\001\002\001\009\001\004\001\030\001\031\001\
\000\000\255\255\002\001\028\001\004\001\037\001\038\001\039\001\
\255\255\255\255\042\001\024\001\004\001\026\001\255\255\000\000\
\000\000\030\001\031\001\032\001\027\001\034\001\035\001\255\255\
\037\001\038\001\039\001\040\001\255\255\042\001\255\255\003\001\
\024\001\005\001\026\001\255\255\255\255\009\001\030\001\031\001\
\255\255\002\001\000\000\004\001\005\001\037\001\038\001\039\001\
\255\255\255\255\042\001\000\000\024\001\002\001\026\001\004\001\
\005\001\255\255\030\001\031\001\032\001\010\001\034\001\035\001\
\255\255\037\001\038\001\039\001\040\001\002\001\042\001\004\001\
\005\001\002\001\255\255\004\001\005\001\255\255\000\000\028\001\
\255\255\001\001\002\001\002\001\004\001\005\001\005\001\000\000\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\027\001\028\001\029\001\002\001\255\255\
\004\001\005\001\000\000\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\027\001\
\028\001\029\001\002\001\255\255\004\001\005\001\000\000\255\255\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\027\001\028\001\002\001\255\255\004\001\
\005\001\000\000\255\255\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\000\000\255\255\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\027\001\028\001\
\002\001\255\255\004\001\005\001\000\000\255\255\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\027\001\028\001\002\001\002\001\004\001\005\001\005\001\
\255\255\008\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\027\001\028\001\002\001\002\001\
\004\001\005\001\005\001\255\255\008\001\255\255\010\001\011\001\
\012\001\255\255\002\001\015\001\016\001\005\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\027\001\
\028\001\002\001\002\001\004\001\005\001\005\001\255\255\008\001\
\255\255\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\027\001\028\001\002\001\255\255\004\001\005\001\
\255\255\255\255\008\001\255\255\010\001\002\001\255\255\004\001\
\005\001\015\001\016\001\008\001\255\255\010\001\020\001\021\001\
\022\001\023\001\015\001\016\001\255\255\027\001\028\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\027\001\028\001\
\002\001\255\255\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\002\001\255\255\004\001\005\001\015\001\016\001\008\001\
\255\255\010\001\020\001\021\001\022\001\023\001\015\001\016\001\
\255\255\027\001\028\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\027\001\028\001\002\001\255\255\004\001\005\001\
\255\255\255\255\008\001\255\255\010\001\002\001\255\255\004\001\
\005\001\015\001\016\001\008\001\255\255\010\001\002\001\255\255\
\004\001\002\001\255\255\004\001\005\001\027\001\028\001\008\001\
\002\001\010\001\004\001\005\001\255\255\255\255\008\001\028\001\
\010\001\002\001\002\001\004\001\004\001\015\001\016\001\027\001\
\028\001\255\255\010\001\028\001\002\001\255\255\004\001\005\001\
\255\255\027\001\028\001\002\001\255\255\004\001\005\001\255\255\
\255\255\008\001\027\001\010\001\028\001\255\255\255\255\002\001\
\255\255\004\001\005\001\255\255\255\255\008\001\028\001\010\001\
\002\001\004\001\004\001\005\001\027\001\028\001\002\001\010\001\
\004\001\005\001\255\255\255\255\008\001\255\255\010\001\255\255\
\027\001\028\001\004\001\255\255\255\255\024\001\002\001\026\001\
\004\001\005\001\028\001\030\001\031\001\255\255\255\255\027\001\
\028\001\255\255\037\001\038\001\039\001\255\255\024\001\042\001\
\026\001\255\255\255\255\255\255\030\001\031\001\002\001\027\001\
\004\001\005\001\255\255\037\001\038\001\039\001\255\255\002\001\
\042\001\004\001\005\001\004\001\255\255\008\001\002\001\010\001\
\004\001\005\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\005\001\
\002\001\028\001\004\001\005\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\005\001\255\255\255\255\255\255\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\024\001\255\255\
\026\001\255\255\013\001\014\001\030\001\031\001\017\001\018\001\
\019\001\255\255\255\255\037\001\038\001\039\001\255\255\255\255\
\042\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001"

let yynames_const = "\
  ASSIGN\000\
  TERMINATOR\000\
  RETURN\000\
  INDENT\000\
  OUTDENT\000\
  ARROW\000\
  LBK\000\
  RBK\000\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQ\000\
  NEQ\000\
  MOD\000\
  AND\000\
  OR\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  COLON\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  DOT\000\
  THIS\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  FORIN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  IDENTIFIER\000\
  NUM\000\
  STRING\000\
  STATEMENT\000\
  OUTDENT_COUNT\000\
  NULL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
                 ( [] )
# 462 "parser.ml"
               : Ast.root))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 33 "parser.mly"
        ( _1 )
# 469 "parser.ml"
               : Ast.root))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 34 "parser.mly"
                    ( _1 )
# 476 "parser.ml"
               : Ast.root))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 37 "parser.mly"
             ( [_1] )
# 483 "parser.ml"
               : 'body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'body) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 38 "parser.mly"
                             ( List.append _1 [_3] )
# 491 "parser.ml"
               : 'body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'body) in
    Obj.repr(
# 39 "parser.mly"
                   ( _1 )
# 498 "parser.ml"
               : 'body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 43 "parser.mly"
                    ( Expression(_1) )
# 505 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'return) in
    Obj.repr(
# 44 "parser.mly"
                  ( _1 )
# 512 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 45 "parser.mly"
                    ( Literal(_1) )
# 519 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 46 "parser.mly"
                                    ( If(_2, _3, _5) )
# 528 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 47 "parser.mly"
                            ( If(_2, _3, []) )
# 536 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 48 "parser.mly"
                                         ( While(_2, _3) )
# 544 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'array) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 49 "parser.mly"
                                     ( For(_2, _4, _5) )
# 553 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'paramList) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 50 "parser.mly"
                                        ( Code(_2, _5) )
# 561 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 53 "parser.mly"
                     ( Return(_2) )
# 568 "parser.ml"
               : 'return))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
          ( Return(Nothing("")) )
# 574 "parser.ml"
               : 'return))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                 ( [] )
# 580 "parser.ml"
               : 'assignList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignObj) in
    Obj.repr(
# 58 "parser.mly"
             ( [_1] )
# 587 "parser.ml"
               : 'assignList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignObj) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignObj) in
    Obj.repr(
# 59 "parser.mly"
                             ( List.append [_1] [_3] )
# 595 "parser.ml"
               : 'assignList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'assignList) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'optComma) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'assignObj) in
    Obj.repr(
# 60 "parser.mly"
                                            ( List.append _1 _4 )
# 604 "parser.ml"
               : 'assignList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'assignList) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'optComma) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'assignList) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optComma) in
    Obj.repr(
# 61 "parser.mly"
                                                          ( List.append _1 _4 )
# 614 "parser.ml"
               : 'assignList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 64 "parser.mly"
                ( _1 )
# 621 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'invocation) in
    Obj.repr(
# 65 "parser.mly"
                    ( _1 )
# 628 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assign) in
    Obj.repr(
# 66 "parser.mly"
                 ( _1 )
# 635 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'obj) in
    Obj.repr(
# 67 "parser.mly"
                ( _1 )
# 642 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 68 "parser.mly"
                               ( Binop(_1, Plus,_3) )
# 650 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 69 "parser.mly"
                                ( Binop(_1, Minus, _3) )
# 658 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 70 "parser.mly"
                                ( Binop(_1, Times, _3) )
# 666 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 71 "parser.mly"
                                 ( Binop(_1, Divide, _3))
# 674 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 72 "parser.mly"
                              ( Binop(_1, Eq, _3) )
# 682 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 73 "parser.mly"
                               ( Binop(_1, Neq, _3) )
# 690 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 74 "parser.mly"
                               ( Binop(_1, Mod, _3) )
# 698 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 75 "parser.mly"
                               ( Binop(_1, And, _3) )
# 706 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 76 "parser.mly"
                              ( Binop(_1, OR, _3) )
# 714 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 77 "parser.mly"
                              ( Binop(_1, Less, _3) )
# 722 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 78 "parser.mly"
                               ( Binop(_1, Leq, _3) )
# 730 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 79 "parser.mly"
                              ( Binop(_1, Greater, _3) )
# 738 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 80 "parser.mly"
                               ( Binop(_1, Geq, _3) )
# 746 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 81 "parser.mly"
                      ( Neg(_2) )
# 753 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'assignList) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'optComma) in
    Obj.repr(
# 84 "parser.mly"
                                     ( Object(_2) )
# 761 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignable) in
    Obj.repr(
# 87 "parser.mly"
              ( _1 )
# 768 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 88 "parser.mly"
           ( _1 )
# 775 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'thisProperty) in
    Obj.repr(
# 89 "parser.mly"
                 ( _1 )
# 782 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'assignable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 92 "parser.mly"
                                               ( Assign (_1, _3) )
# 790 "parser.ml"
               : 'assign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'assignable) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 93 "parser.mly"
                                               ( Assign (_1, _4) )
# 798 "parser.ml"
               : 'assign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'assignable) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 94 "parser.mly"
                                               ( Assign (_1, _4) )
# 806 "parser.ml"
               : 'assign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 97 "parser.mly"
              ( _1 )
# 813 "parser.ml"
               : 'assignable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'thisProperty) in
    Obj.repr(
# 98 "parser.mly"
                ( _1 )
# 820 "parser.ml"
               : 'assignable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 99 "parser.mly"
                        ( Assignable(_1, _3) )
# 828 "parser.ml"
               : 'assignable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'objAssignable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 103 "parser.mly"
                                  ( (_1, _3) )
# 836 "parser.ml"
               : 'assignObj))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'objAssignable) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 104 "parser.mly"
                                                 ( (_1, _4) )
# 844 "parser.ml"
               : 'assignObj))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 107 "parser.mly"
               ( _1 )
# 851 "parser.ml"
               : 'objAssignable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'thisProperty) in
    Obj.repr(
# 108 "parser.mly"
                 ( _1 )
# 858 "parser.ml"
               : 'objAssignable))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                 ( )
# 864 "parser.ml"
               : 'optComma))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
           ( )
# 870 "parser.ml"
               : 'optComma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'value) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments) in
    Obj.repr(
# 116 "parser.mly"
                   ( Invocation(_1, _2) )
# 878 "parser.ml"
               : 'invocation))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                 ( [] )
# 884 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'argList) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'optComma) in
    Obj.repr(
# 120 "parser.mly"
                                  ( _2 )
# 892 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 123 "parser.mly"
              ( _1 )
# 899 "parser.ml"
               : 'argList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 124 "parser.mly"
                            ( List.append _1 _3 )
# 907 "parser.ml"
               : 'argList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'argList) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'optComma) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 125 "parser.mly"
                                          ( List.append _1 _4 )
# 916 "parser.ml"
               : 'argList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'argList) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'optComma) in
    Obj.repr(
# 126 "parser.mly"
                                   ( _2 )
# 924 "parser.ml"
               : 'argList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'argList) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'optComma) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'argList) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optComma) in
    Obj.repr(
# 127 "parser.mly"
                                                    ( List.append _1 _4 )
# 934 "parser.ml"
               : 'argList))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
                  ( [] )
# 940 "parser.ml"
               : 'paramList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 131 "parser.mly"
         ( _1 )
# 947 "parser.ml"
               : 'paramList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'paramList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 132 "parser.mly"
                         ( List.append _1 _3 )
# 955 "parser.ml"
               : 'paramList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'paramList) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'optComma) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 133 "parser.mly"
                                       ( List.append _1 _4 )
# 964 "parser.ml"
               : 'paramList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'paramList) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'optComma) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'paramList) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optComma) in
    Obj.repr(
# 134 "parser.mly"
                                                        (List.append _1 _4 )
# 974 "parser.ml"
               : 'paramList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paramVar) in
    Obj.repr(
# 137 "parser.mly"
            ( Param(_1) )
# 981 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'paramVar) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 138 "parser.mly"
                              ( Param(_1, _3) )
# 989 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 141 "parser.mly"
              ( _1 )
# 996 "parser.ml"
               : 'paramVar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array) in
    Obj.repr(
# 142 "parser.mly"
         ( _1 )
# 1003 "parser.ml"
               : 'paramVar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'obj) in
    Obj.repr(
# 143 "parser.mly"
       ( _1 )
# 1010 "parser.ml"
               : 'paramVar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'thisProperty) in
    Obj.repr(
# 144 "parser.mly"
                ( _1 )
# 1017 "parser.ml"
               : 'paramVar))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'indexValue) in
    Obj.repr(
# 147 "parser.mly"
                      ( _2 )
# 1024 "parser.ml"
               : 'index))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 150 "parser.mly"
              ( _1 )
# 1031 "parser.ml"
               : 'indexValue))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
            ( Array([]) )
# 1037 "parser.ml"
               : 'array))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'argList) in
    Obj.repr(
# 154 "parser.mly"
                    ( Array(_2) )
# 1044 "parser.ml"
               : 'array))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
                  ( [] )
# 1050 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'body) in
    Obj.repr(
# 158 "parser.mly"
                       ( _2 )
# 1057 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 161 "parser.mly"
            ( Id(_1) )
# 1064 "parser.ml"
               : 'identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 164 "parser.mly"
        ( Num(_1) )
# 1071 "parser.ml"
               : 'alphaNumeric))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "parser.mly"
          ( String(_1) )
# 1078 "parser.ml"
               : 'alphaNumeric))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'alphaNumeric) in
    Obj.repr(
# 168 "parser.mly"
                ( _1 )
# 1085 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "parser.mly"
         ( _1 )
# 1092 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 170 "parser.mly"
         ( Boolean{_1} )
# 1099 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'identifier) in
    Obj.repr(
# 173 "parser.mly"
                   ( ThisProperty(_2) )
# 1106 "parser.ml"
               : 'thisProperty))
(* Entry root *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let root (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.root)
